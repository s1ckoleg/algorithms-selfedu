"""
Алгоритм для определения минимального остого графа.
Остов — это подграф данного графа, содержащий все его вершины без циклов.
https://www.youtube.com/watch?v=_SLQMpLzcUE&list=PLA0M1Bcd0w8yF0PO0eJ9v8VlsYEowmsnJ&index=7
"""

import math


def get_min(R, U):  # функция для получения минимального ребра графа
    rm = (math.inf, -1, -1)  # переменная содержащая следующее минимальное ребро
    for v in U:
        rr = min(R, key=lambda x: x[0] if (x[1] == v or x[2] == v) and (x[1] not in U or x[2] not in U) else math.inf)
        if rm[0] > rr[0]:
            rm = rr
    return rm


# список ребер графа (длина, вершина 1, вершина 2)
# первое значение возвращается, если нет минимальных ребер
R = [(math.inf, -1, -1), (13, 1, 2), (18, 1, 3), (17, 1, 4), (14, 1, 5), (22, 1, 6),
     (26, 2, 3), (19, 2, 5), (30, 3, 4), (22, 4, 6)]

N = 6    # число вершин
U = {1}  # множество соединённых вершин остова
T = []   # список ребер остова

while len(U) < N:  # пока не пройдём через все вершины
    r = get_min(R, U)     # ребро с минимальным весом
    if r[0] == math.inf:  # если минимальных ребер больше нет
        break             # необходимый остов построен

    T.append(r)           # добавляем ребро в остов
    U.add(r[1])           # добавляем вершины в множество пройденных вершин
    U.add(r[2])

print(T)
